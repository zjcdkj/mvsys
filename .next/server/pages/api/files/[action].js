"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/files/[action]";
exports.ids = ["pages/api/files/[action]"];
exports.modules = {

/***/ "@ffmpeg-installer/ffmpeg":
/*!*******************************************!*\
  !*** external "@ffmpeg-installer/ffmpeg" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("@ffmpeg-installer/ffmpeg");

/***/ }),

/***/ "@ffprobe-installer/ffprobe":
/*!*********************************************!*\
  !*** external "@ffprobe-installer/ffprobe" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("@ffprobe-installer/ffprobe");

/***/ }),

/***/ "fluent-ffmpeg":
/*!********************************!*\
  !*** external "fluent-ffmpeg" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("fluent-ffmpeg");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(api)/./pages/api/files/[action].ts":
/*!*************************************!*\
  !*** ./pages/api/files/[action].ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/videoProcessor */ \"(api)/./utils/videoProcessor.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_0__, _utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__]);\n([formidable__WEBPACK_IMPORTED_MODULE_0__, _utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nconst uploadDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"uploads\");\nconst recordsFile = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"upload_records.json\");\n// 确保上传目录存在\nif (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(uploadDir)) {\n    fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(uploadDir, {\n        recursive: true\n    });\n}\n// 确保记录文件存在\nif (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(recordsFile)) {\n    fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(recordsFile, JSON.stringify([]));\n}\nasync function handler(req, res) {\n    const { action } = req.query;\n    console.log(`Received ${req.method} request for action: ${action}`);\n    try {\n        // 只在需要使用 FFmpeg 的操作中进行检查\n        if (action === \"extractAudio\") {\n            const ffmpegAvailable = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.checkFFmpeg)();\n            if (!ffmpegAvailable) {\n                return res.status(500).json({\n                    error: \"FFmpeg is not available\"\n                });\n            }\n        }\n        switch(action){\n            case \"upload\":\n                if (req.method === \"POST\") {\n                    console.log(\"Processing file upload\");\n                    const form = (0,formidable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                        uploadDir: uploadDir,\n                        keepExtensions: true,\n                        maxFileSize: 200 * 1024 * 1024\n                    });\n                    form.parse(req, (err, fields, files)=>{\n                        if (err) {\n                            console.error(\"Error parsing form:\", err);\n                            return res.status(500).json({\n                                error: \"Error parsing form data\",\n                                details: err.message\n                            });\n                        }\n                        console.log(\"Form parsed successfully\");\n                        const file = files.file?.[0];\n                        if (!file) {\n                            console.error(\"No file uploaded\");\n                            return res.status(400).json({\n                                error: \"No file uploaded\"\n                            });\n                        }\n                        console.log(\"File received:\", file.originalFilename);\n                        if (file.size > 200 * 1024 * 1024) {\n                            console.error(\"File size exceeds limit:\", file.size);\n                            return res.status(400).json({\n                                error: \"File size exceeds 200MB limit\"\n                            });\n                        }\n                        if (file.mimetype !== \"video/mp4\") {\n                            console.error(\"Invalid file type:\", file.mimetype);\n                            return res.status(400).json({\n                                error: \"Only MP4 files are allowed\"\n                            });\n                        }\n                        // 生成新的文件名\n                        const originalName = path__WEBPACK_IMPORTED_MODULE_2___default().parse(file.originalFilename || \"\").name;\n                        const extension = path__WEBPACK_IMPORTED_MODULE_2___default().parse(file.originalFilename || \"\").ext;\n                        let newFilename = `${originalName}${extension}`;\n                        let counter = 1;\n                        // 检查文件是否已存在，如果存在则重命名\n                        while(fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, newFilename))){\n                            newFilename = `${originalName}(${counter})${extension}`;\n                            counter++;\n                        }\n                        const newPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, newFilename);\n                        fs__WEBPACK_IMPORTED_MODULE_1___default().renameSync(file.filepath, newPath);\n                        const fileInfo = {\n                            originalName: file.originalFilename,\n                            name: newFilename,\n                            size: file.size,\n                            type: file.mimetype,\n                            uploadedAt: new Date().toISOString()\n                        };\n                        // 添加文件记录\n                        const records = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(recordsFile, \"utf-8\"));\n                        records.push(fileInfo);\n                        fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(recordsFile, JSON.stringify(records, null, 2));\n                        console.log(\"File uploaded successfully:\", fileInfo);\n                        return res.status(200).json({\n                            message: \"File uploaded successfully\",\n                            fileInfo\n                        });\n                    });\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"POST\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"list\":\n                if (req.method === \"GET\") {\n                    try {\n                        const records = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(recordsFile, \"utf-8\"));\n                        console.log(\"Records retrieved:\", records);\n                        res.status(200).json(records);\n                    } catch (error) {\n                        console.error(\"Error reading records file:\", error);\n                        res.status(500).json({\n                            error: \"Error retrieving file records\"\n                        });\n                    }\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"GET\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"delete\":\n                if (req.method === \"DELETE\") {\n                    // 使用 URL 参数而不是请求体\n                    const { filename } = req.query;\n                    if (!filename || typeof filename !== \"string\") {\n                        return res.status(400).json({\n                            error: \"Filename is required\"\n                        });\n                    }\n                    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, filename);\n                    const audioFilePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"download\", \"mp3\", `${path__WEBPACK_IMPORTED_MODULE_2___default().parse(filename).name}.mp3`);\n                    console.log(\"Attempting to delete file:\", filePath);\n                    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(filePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(filePath);\n                        console.log(\"Video file deleted successfully\");\n                        // 删除对应的音频文件（如果存��）\n                        if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(audioFilePath)) {\n                            fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(audioFilePath);\n                            console.log(\"Audio file deleted successfully\");\n                        }\n                        // 更新记录文件\n                        const records = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(recordsFile, \"utf-8\"));\n                        const updatedRecords = records.filter((record)=>record.name !== filename);\n                        fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(recordsFile, JSON.stringify(updatedRecords, null, 2));\n                        res.status(200).json({\n                            message: \"File deleted successfully\"\n                        });\n                    } else {\n                        console.log(\"File not found:\", filePath);\n                        res.status(404).json({\n                            error: \"File not found\"\n                        });\n                    }\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"DELETE\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"rename\":\n                if (req.method === \"PUT\") {\n                    const { oldName, newName } = req.body;\n                    const oldPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, oldName);\n                    const newPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, newName);\n                    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(oldPath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_1___default().renameSync(oldPath, newPath);\n                        res.status(200).json({\n                            message: \"File renamed successfully\"\n                        });\n                    } else {\n                        res.status(404).json({\n                            error: \"File not found\"\n                        });\n                    }\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"PUT\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"extractAudio\":\n                if (req.method === \"POST\") {\n                    const form = (0,formidable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n                    form.parse(req, async (err, fields, files)=>{\n                        if (err) {\n                            console.error(\"Error parsing form:\", err);\n                            return res.status(500).json({\n                                error: \"Error parsing form data\"\n                            });\n                        }\n                        const filename = Array.isArray(fields.filename) ? fields.filename[0] : fields.filename;\n                        if (!filename) {\n                            return res.status(400).json({\n                                error: \"Filename is required\"\n                            });\n                        }\n                        console.log(\"Extracting audio for file:\", filename);\n                        const videoPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(uploadDir, filename);\n                        console.log(\"Full video path:\", videoPath);\n                        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(videoPath)) {\n                            console.error(\"Video file not found:\", videoPath);\n                            return res.status(404).json({\n                                error: \"Video file not found\"\n                            });\n                        }\n                        try {\n                            // 在提取音频之前检查 FFmpeg\n                            const ffmpegAvailable = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.checkFFmpeg)();\n                            if (!ffmpegAvailable) {\n                                return res.status(500).json({\n                                    error: \"FFmpeg is not available\"\n                                });\n                            }\n                            // 获取 FFmpeg 版本\n                            const ffmpegVersion = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.getFFmpegVersion)();\n                            console.log(\"FFmpeg version:\", ffmpegVersion);\n                            // 使用 SSE (Server-Sent Events) 来报告进度\n                            res.writeHead(200, {\n                                \"Content-Type\": \"text/event-stream\",\n                                \"Cache-Control\": \"no-cache\",\n                                \"Connection\": \"keep-alive\"\n                            });\n                            const audioPath = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.extractAudio)(videoPath);\n                            const audioFilename = path__WEBPACK_IMPORTED_MODULE_2___default().basename(audioPath);\n                            console.log(\"Audio extracted successfully:\", audioFilename);\n                            // 获取音频时长\n                            const duration = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.getAudioDuration)(audioPath);\n                            // 获取音频文件大小\n                            const { size } = fs__WEBPACK_IMPORTED_MODULE_1___default().statSync(audioPath);\n                            // 更新文件记录\n                            const records = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(recordsFile, \"utf-8\"));\n                            const updatedRecords = records.map((record)=>{\n                                if (record.name === filename) {\n                                    return {\n                                        ...record,\n                                        audioFile: audioFilename\n                                    };\n                                }\n                                return record;\n                            });\n                            fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(recordsFile, JSON.stringify(updatedRecords, null, 2));\n                            res.write(`data: ${JSON.stringify({\n                                complete: true,\n                                audioFile: audioFilename,\n                                duration,\n                                size\n                            })}\\n\\n`);\n                            res.end();\n                        } catch (error) {\n                            console.error(\"Error extracting audio:\", error);\n                            res.write(`data: ${JSON.stringify({\n                                error: \"Error extracting audio\",\n                                details: error.message\n                            })}\\n\\n`);\n                            res.end();\n                        }\n                    });\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"POST\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"getAudio\":\n                if (req.method === \"GET\") {\n                    const { filename } = req.query;\n                    if (!filename || typeof filename !== \"string\") {\n                        return res.status(400).json({\n                            error: \"Filename is required\"\n                        });\n                    }\n                    const audioPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"download\", \"mp3\", filename);\n                    console.log(\"Attempting to serve audio file:\", audioPath);\n                    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(audioPath)) {\n                        const stat = fs__WEBPACK_IMPORTED_MODULE_1___default().statSync(audioPath);\n                        res.writeHead(200, {\n                            \"Content-Type\": \"audio/mpeg\",\n                            \"Content-Length\": stat.size\n                        });\n                        const readStream = fs__WEBPACK_IMPORTED_MODULE_1___default().createReadStream(audioPath);\n                        readStream.pipe(res);\n                    } else {\n                        console.log(\"Audio file not found:\", audioPath);\n                        res.status(404).json({\n                            error: \"Audio file not found\"\n                        });\n                    }\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"GET\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            case \"getAudioUrl\":\n                if (req.method === \"GET\") {\n                    const { filename } = req.query;\n                    if (typeof filename !== \"string\") {\n                        return res.status(400).json({\n                            error: \"Invalid filename\"\n                        });\n                    }\n                    try {\n                        const url = await (0,_utils_videoProcessor__WEBPACK_IMPORTED_MODULE_3__.getAudioFileUrl)(filename);\n                        console.log(\"Audio URL generated:\", url); // 添加日志\n                        return res.status(200).json({\n                            url\n                        });\n                    } catch (error) {\n                        console.error(\"Error getting audio URL:\", error); // 添加错误日志\n                        return res.status(404).json({\n                            error: \"Audio file not found\"\n                        });\n                    }\n                } else {\n                    res.setHeader(\"Allow\", [\n                        \"GET\"\n                    ]);\n                    res.status(405).end(`Method ${req.method} Not Allowed`);\n                }\n                break;\n            default:\n                console.error(\"Invalid action:\", action);\n                res.status(404).json({\n                    error: \"Action not found\"\n                });\n        }\n    } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        res.status(500).json({\n            error: \"An unexpected error occurred\",\n            details: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/files/[action].ts\n");

/***/ }),

/***/ "(api)/./utils/videoProcessor.ts":
/*!*********************************!*\
  !*** ./utils/videoProcessor.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFFmpeg: () => (/* binding */ checkFFmpeg),\n/* harmony export */   cleanText: () => (/* binding */ cleanText),\n/* harmony export */   convertSpeechToText: () => (/* binding */ convertSpeechToText),\n/* harmony export */   extractAudio: () => (/* binding */ extractAudio),\n/* harmony export */   getAudioDuration: () => (/* binding */ getAudioDuration),\n/* harmony export */   getAudioFileUrl: () => (/* binding */ getAudioFileUrl),\n/* harmony export */   getFFmpegVersion: () => (/* binding */ getFFmpegVersion),\n/* harmony export */   processVideo: () => (/* binding */ processVideo)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fluent-ffmpeg */ \"fluent-ffmpeg\");\n/* harmony import */ var fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _ffmpeg_installer_ffmpeg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ffmpeg-installer/ffmpeg */ \"@ffmpeg-installer/ffmpeg\");\n/* harmony import */ var _ffmpeg_installer_ffmpeg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ffmpeg_installer_ffmpeg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _ffprobe_installer_ffprobe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ffprobe-installer/ffprobe */ \"@ffprobe-installer/ffprobe\");\n/* harmony import */ var _ffprobe_installer_ffprobe__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_ffprobe_installer_ffprobe__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_8__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_3__]);\nopenai__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\nconst configuration = new openai__WEBPACK_IMPORTED_MODULE_3__.Configuration({\n    apiKey: process.env.OPENAI_API_KEY,\n    basePath: \"https://api.openai-hub.com/v1\"\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__.OpenAIApi(configuration);\nconst mongoUri = process.env.MONGODB_URI;\nif (!mongoUri) {\n    console.error(\"MONGODB_URI is not defined in the environment variables\");\n    process.exit(1);\n}\nconsole.log(\"MongoDB URI:\", mongoUri);\nlet mongoClient = null;\nasync function getMongoClient() {\n    if (!mongoUri) {\n        throw new Error(\"MONGODB_URI is not defined\");\n    }\n    if (!mongoClient) {\n        try {\n            mongoClient = new mongodb__WEBPACK_IMPORTED_MODULE_4__.MongoClient(mongoUri);\n            await mongoClient.connect();\n            console.log(\"Connected successfully to MongoDB\");\n        } catch (error) {\n            console.error(\"Failed to connect to MongoDB:\", error);\n            throw error;\n        }\n    }\n    return mongoClient;\n}\nfunction runCommand(command) {\n    return new Promise((resolve, reject)=>{\n        (0,child_process__WEBPACK_IMPORTED_MODULE_0__.exec)(command, {\n            encoding: \"utf8\"\n        }, (error, stdout, stderr)=>{\n            if (error) {\n                console.error(`Error executing command: ${command}`);\n                console.error(`Error: ${error}`);\n                console.error(`stderr: ${stderr}`);\n                reject(error);\n            } else {\n                resolve(stdout);\n            }\n        });\n    });\n}\nasync function processVideo(filePath) {\n    try {\n        // 1. 音频分离\n        const audioFile = await extractAudio(filePath);\n        // 2. 音频转文本\n        const textContent = await convertSpeechToText(audioFile);\n        // 3. 文本清洗\n        const cleanedText = await cleanText(textContent);\n        // 4. 文本存储\n        await storeText([\n            cleanedText\n        ]);\n        // 5. 高级分析\n        const analysisResult = await performAdvancedAnalysis([\n            cleanedText\n        ]);\n        return analysisResult;\n    } catch (error) {\n        console.error(\"Error in video processing:\", error);\n        throw error;\n    }\n}\nfunction extractAudio(videoPath) {\n    return new Promise((resolve, reject)=>{\n        const outputDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"download\", \"mp3\");\n        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(outputDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(outputDir, {\n                recursive: true\n            });\n        }\n        const outputPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(outputDir, `${path__WEBPACK_IMPORTED_MODULE_2___default().basename(videoPath, \".mp4\")}.mp3`);\n        console.log(\"Input video path:\", videoPath);\n        console.log(\"Output audio path:\", outputPath);\n        if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(outputPath)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(outputPath);\n        }\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default()(videoPath).outputOptions(\"-vn\").audioCodec(\"libmp3lame\").audioChannels(2).audioBitrate(\"192k\").output(outputPath).on(\"end\", ()=>{\n            console.log(\"Audio extraction completed:\", outputPath);\n            resolve(outputPath);\n        }).on(\"error\", (err)=>{\n            console.error(\"Error during audio extraction:\", err);\n            reject(err);\n        }).run();\n    });\n}\nasync function convertSpeechToText(audioFile) {\n    try {\n        const response = await openai.createTranscription(fs__WEBPACK_IMPORTED_MODULE_1___default().createReadStream(audioFile), \"whisper-1\");\n        const transcription = response.data.text;\n        // 保存转录文本为 txt 文件\n        const txtFilePath = audioFile.replace(\".mp3\", \".txt\");\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.writeFile(txtFilePath, transcription, \"utf-8\");\n        console.log(\"Transcription saved to:\", txtFilePath);\n        return transcription;\n    } catch (error) {\n        console.error(\"Error in speech to text conversion:\", error);\n        throw error;\n    }\n}\nasync function cleanText(text) {\n    // 这里可以实现文本清洗的逻辑\n    // 例如：移除特殊字符，纠正常见错误等\n    let cleanedText = text.replace(/[^\\w\\s.,?!]/g, \"\");\n    cleanedText = cleanedText.replace(/\\s+/g, \" \").trim();\n    return cleanedText;\n}\nasync function storeText(texts) {\n    const client = await getMongoClient();\n    try {\n        const db = client.db(\"video_analysis\");\n        const collection = db.collection(\"transcripts\");\n        await collection.insertMany(texts.map((text)=>({\n                content: text\n            })));\n        console.log(\"Texts stored successfully in MongoDB\");\n    } catch (error) {\n        console.error(\"Error storing texts in MongoDB:\", error);\n        throw error;\n    }\n}\nasync function performAdvancedAnalysis(texts) {\n    return {\n        analysis: \"Sample analysis result\"\n    };\n}\nasync function getAudioDuration(audioPath) {\n    return new Promise((resolve, reject)=>{\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().ffprobe(audioPath, (err, metadata)=>{\n            if (err) {\n                console.error(\"Error getting audio duration:\", err);\n                reject(err);\n            } else {\n                const duration = metadata.format.duration;\n                console.log(\"Audio duration:\", duration);\n                resolve(duration || 0); // 添加 || 0 来确保返回一个数字\n            }\n        });\n    });\n}\nasync function checkFFmpeg() {\n    try {\n        const getAvailableFormats = (0,util__WEBPACK_IMPORTED_MODULE_8__.promisify)((fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().getAvailableFormats));\n        await getAvailableFormats();\n        console.log(\"FFmpeg is available\");\n        return true;\n    } catch (error) {\n        console.error(\"Error checking FFmpeg:\", error);\n        return false;\n    }\n}\nasync function getFFmpegVersion() {\n    try {\n        const getAvailableCodecs = (0,util__WEBPACK_IMPORTED_MODULE_8__.promisify)((fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().getAvailableCodecs));\n        const getAvailableEncoders = (0,util__WEBPACK_IMPORTED_MODULE_8__.promisify)((fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().getAvailableEncoders));\n        const codecs = await getAvailableCodecs();\n        const encoders = await getAvailableEncoders();\n        return `FFmpeg version: available (codecs: ${Object.keys(codecs).length}, encoders: ${Object.keys(encoders).length})`;\n    } catch (error) {\n        console.error(\"Error getting FFmpeg version:\", error);\n        return \"FFmpeg version: unavailable\";\n    }\n}\nfluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().setFfmpegPath((_ffmpeg_installer_ffmpeg__WEBPACK_IMPORTED_MODULE_6___default().path));\nfluent_ffmpeg__WEBPACK_IMPORTED_MODULE_5___default().setFfprobePath((_ffprobe_installer_ffprobe__WEBPACK_IMPORTED_MODULE_7___default().path));\nasync function getAudioFileUrl(filename) {\n    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"download\", \"mp3\", filename);\n    console.log(\"Checking for audio file at:\", filePath); // 添加日志\n    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(filePath)) {\n        return `/api/files/download/mp3/${encodeURIComponent(filename)}`;\n    } else {\n        console.error(\"Audio file not found:\", filePath); // 添加错误日志\n        throw new Error(\"Audio file not found\");\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/videoProcessor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/files/[action].ts"));
module.exports = __webpack_exports__;

})();