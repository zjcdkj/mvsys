"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/splitAndVectorize";
exports.ids = ["pages/api/splitAndVectorize"];
exports.modules = {

/***/ "chromadb":
/*!***************************!*\
  !*** external "chromadb" ***!
  \***************************/
/***/ ((module) => {

module.exports = import("chromadb");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/splitAndVectorize.ts":
/*!****************************************!*\
  !*** ./pages/api/splitAndVectorize.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var chromadb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chromadb */ \"chromadb\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([chromadb__WEBPACK_IMPORTED_MODULE_2__, openai__WEBPACK_IMPORTED_MODULE_3__]);\n([chromadb__WEBPACK_IMPORTED_MODULE_2__, openai__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        const { fileName, settings } = req.body;\n        if (!fileName) {\n            return res.status(400).json({\n                error: \"File name is required\"\n            });\n        }\n        try {\n            console.log(\"Starting process for file:\", fileName);\n            const knowledgeDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"knowledge\");\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(knowledgeDir, fileName);\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n                throw new Error(`File not found: ${filePath}`);\n            }\n            const content = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf-8\");\n            console.log(\"File content length:\", content.length);\n            const chunks = content.split(\"\\n\\n\").filter((chunk)=>chunk.trim() !== \"\").flatMap((paragraph)=>{\n                const words = paragraph.split(\" \");\n                const chunks = [];\n                for(let i = 0; i < words.length; i += settings.chunkSize - settings.overlap){\n                    chunks.push(words.slice(i, i + settings.chunkSize).join(\" \"));\n                }\n                return chunks;\n            });\n            console.log(\"Number of chunks:\", chunks.length);\n            console.log(\"Initializing Chroma client...\");\n            const chromaDbPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"chroma_db\");\n            console.log(\"Chroma DB Path:\", chromaDbPath);\n            const client = new chromadb__WEBPACK_IMPORTED_MODULE_2__.ChromaClient({\n                path: process.env.CHROMA_SERVER_URL || \"http://localhost:8000\",\n                persistDirectory: chromaDbPath // 添加这一行\n            });\n            console.log(\"Initializing OpenAI...\");\n            const openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                apiKey: process.env.OPENAI_API_KEY\n            });\n            console.log(\"Creating or getting collection...\");\n            const collection = await client.getOrCreateCollection({\n                name: \"knowledge_base\"\n            });\n            console.log(\"Collection details:\", collection);\n            console.log(\"Generating embeddings and adding documents...\");\n            for(let i = 0; i < chunks.length; i++){\n                const chunk = chunks[i];\n                console.log(`Processing chunk ${i + 1}/${chunks.length}`);\n                const embedding = await openai.embeddings.create({\n                    model: settings.embeddingModel,\n                    input: chunk\n                });\n                await collection.add({\n                    ids: [\n                        `${fileName}_chunk_${i}`\n                    ],\n                    embeddings: embedding.data[0].embedding,\n                    metadatas: [\n                        {\n                            source: fileName\n                        }\n                    ],\n                    documents: [\n                        chunk\n                    ]\n                });\n                console.log(`Added chunk ${i + 1} to collection`);\n            }\n            console.log(\"Documents added successfully.\");\n            res.status(200).json({\n                success: true,\n                message: \"入库成功\"\n            });\n        } catch (error) {\n            console.error(\"Error processing file:\", error);\n            res.status(500).json({\n                error: \"Error processing file\",\n                details: error.message,\n                stack: error.stack\n            });\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/splitAndVectorize.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/splitAndVectorize.ts"));
module.exports = __webpack_exports__;

})();